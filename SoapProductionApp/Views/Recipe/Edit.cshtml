@model SoapProductionApp.Models.Recipe.ViewModels.RecipeCreateEditViewModel

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-7">
            <div class="card shadow-lg rounded-4">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">Edit Recipe</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post" id="recipeForm">
                        <input type="hidden" asp-for="Id" />

                        <div class="mb-3">
                            <label asp-for="Name" class="form-label">Recipe Name</label>
                            <input asp-for="Name" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="ImageUrl" class="form-label">Image URL</label>
                            <input asp-for="ImageUrl" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="BatchSize" class="form-label">Batch Size</label>
                            <input asp-for="BatchSize" class="form-control" type="number" min="1" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="DaysOfCure" class="form-label">Days to Cure</label>
                            <input asp-for="DaysOfCure" class="form-control" type="number" min="1" />
                        </div>

                        <h4>Ingredients</h4>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Ingredient</th>
                                    <th>Quantity</th>
                                    <th>Cost</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="ingredientList">
                                @for (int i = 0; i < Model.Ingredients.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            <select class="form-select ingredient-select" name="Ingredients[@i].WarehouseItemId" onchange="updateUnitAndCost(this)">
                                                @foreach (var item in Model.AvailableWarehouseItems)
                                                {
                                                    <option value="@item.Id"
                                                            data-price="@item.AveragePricePerUnitWithoutTax.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)"
                                                            data-unit="@((int)item.Unit)">
                                                        @item.Name
                                                    </option>
                                                }
                                            </select>
                                        </td>
                                        <td class="d-flex align-items-center">
                                            <input type="number" class="form-control w-50 quantity-input"
                                                   name="Ingredients[@i].Quantity"
                                                   value="@Model.Ingredients[i].Quantity.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                                                   min="0.01" step="0.01" oninput="updateUnitAndCost(this.closest('tr').querySelector('select'))" />
                                            <span class="ms-2 unit-display">@Model.Ingredients[i].Unit</span>

                                            <input type="hidden" name="Ingredients[@i].Unit" value="@Model.Ingredients[i].Unit" />
                                        </td>
                                        <td>
                                            <span class="cost">@Model.Ingredients[i].Cost.ToString("0.00") €</span>
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" onclick="removeIngredient(this)">❌</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <button type="button" id="addIngredientBtn" class="btn btn-success" onclick="addIngredient()">➕ Add Ingredient</button>

                        <h5 class="mt-3">Total Cost: <span id="totalCost">@Model.Ingredients.Sum(i => i.Cost).ToString("0.00") €</span></h5>

                        <div class="d-grid gap-2 mt-3">
                            <button type="submit" class="btn btn-success">Save Changes</button>
                            <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    console.log("Skript se načetl!"); // Debug zpráva

    let availableItems = @Html.Raw(Json.Serialize(Model.AvailableWarehouseItems));

    let unitMapping = {
        1: "L",
        2: "ml",
        3: "Kg",
        4: "g",
        5: "Pcs"
    };

    function updateUnitAndCost(selectElement) {
        let selectedOption = selectElement.selectedOptions[0];
        if (!selectedOption) return;

        let unitKey = parseInt(selectedOption.dataset.unit);
        let pricePerUnit = parseFloat(selectedOption.dataset.price.replace(",", ".")) || 0;
        let row = selectElement.closest("tr");

        let quantityInput = row.querySelector(".quantity-input");
        let unitSpan = row.querySelector(".unit-display");
        let unitHidden = row.querySelector("input[name$='.Unit']");
        let costSpan = row.querySelector(".cost");

        let quantity = parseFloat(quantityInput.value.replace(",", ".")) || 0;

        let unitText = unitMapping[unitKey] || "Unknown";
        unitSpan.textContent = unitText;
        unitHidden.value = unitText;

        if (!isNaN(pricePerUnit) && !isNaN(quantity) && quantity > 0) {
            let cost = pricePerUnit * quantity;
            costSpan.textContent = cost.toFixed(2) + " €";
        } else {
            costSpan.textContent = "0.00 €";
        }

        updateTotalCost();
    }

    function updateTotalCost() {
        let total = 0;
        document.querySelectorAll("#ingredientList tr").forEach(row => {
            let select = row.querySelector("select");
            let quantityInput = row.querySelector(".quantity-input");
            let pricePerUnit = parseFloat(select.selectedOptions[0].dataset.price.replace(",", "."));
            let costSpan = row.querySelector(".cost");

            let quantity = parseFloat(quantityInput.value.replace(",", ".")) || 0;

            if (!isNaN(pricePerUnit) && !isNaN(quantity) && quantity > 0) {
                let cost = pricePerUnit * quantity;
                costSpan.textContent = cost.toFixed(2) + " €";
                total += cost;
            } else {
                costSpan.textContent = "0.00 €";
            }
        });

        document.getElementById("totalCost").textContent = total.toFixed(2) + " €";
    }

    function removeIngredient(button) {
        let row = button.closest("tr");
        row.parentNode.removeChild(row);
        updateTotalCost();
        checkAvailableItems();
    }

    function addIngredient() {
        let ingredientList = document.getElementById("ingredientList");
        let index = ingredientList.children.length;

        let newRow = document.createElement("tr");

        let selectTd = document.createElement("td");
        let select = document.createElement("select");
        select.classList.add("form-select", "ingredient-select");
        select.name = `Ingredients[${index}].WarehouseItemId`;
        select.onchange = function () { updateUnitAndCost(this); };

        let usedIds = Array.from(document.querySelectorAll("#ingredientList select")).map(s => s.value);

        availableItems
            .filter(item => !usedIds.includes(item.id.toString()))
            .forEach(item => {
                let option = document.createElement("option");
                option.value = item.id;
                option.textContent = item.name;
                option.setAttribute("data-price", item.averagePricePerUnitWithoutTax);
                option.setAttribute("data-unit", item.unit);
                select.appendChild(option);
            });

        selectTd.appendChild(select);
        newRow.appendChild(selectTd);

        let quantityTd = document.createElement("td");
        quantityTd.classList.add("d-flex", "align-items-center");

        let quantityInput = document.createElement("input");
        quantityInput.type = "number";
        quantityInput.classList.add("form-control", "w-50", "quantity-input");
        quantityInput.name = `Ingredients[${index}].Quantity`;
        quantityInput.value = "1.00";
        quantityInput.min = "0.01";
        quantityInput.step = "0.01";
        quantityInput.oninput = function () { updateUnitAndCost(select); };

        let unitSpan = document.createElement("span");
        unitSpan.classList.add("ms-2", "unit-display");

        let unitHidden = document.createElement("input");
        unitHidden.type = "hidden";
        unitHidden.name = `Ingredients[${index}].Unit`;

        quantityTd.appendChild(quantityInput);
        quantityTd.appendChild(unitSpan);
        quantityTd.appendChild(unitHidden);

        let costTd = document.createElement("td");
        let costSpan = document.createElement("span");
        costSpan.classList.add("cost");
        costSpan.textContent = "0.00 €";
        costTd.appendChild(costSpan);

        let removeTd = document.createElement("td");
        let removeBtn = document.createElement("button");
        removeBtn.type = "button";
        removeBtn.classList.add("btn", "btn-danger");
        removeBtn.textContent = "❌";
        removeBtn.onclick = function () {
            ingredientList.removeChild(newRow);
            updateTotalCost();
        };
        removeTd.appendChild(removeBtn);

        newRow.appendChild(quantityTd);
        newRow.appendChild(costTd);
        newRow.appendChild(removeTd);
        ingredientList.appendChild(newRow);

        updateUnitAndCost(select);
        updateTotalCost();
        checkAvailableItems();
    }

    function checkAvailableItems() {
        let usedIds = Array.from(document.querySelectorAll("#ingredientList select")).map(s => s.value);
        let available = availableItems.filter(item => !usedIds.includes(item.id.toString()));
        document.getElementById("addIngredientBtn").disabled = available.length === 0;
    }

    checkAvailableItems();
</script>
