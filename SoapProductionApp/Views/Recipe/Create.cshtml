@model SoapProductionApp.Models.Recipe.ViewModels.RecipeCreateEditViewModel

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-7">
            <div class="card shadow-lg rounded-4">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">Create New Recipe</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="recipeForm">
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label">Recipe Name</label>
                            <input asp-for="Name" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="ImageUrl" class="form-label">Image URL</label>
                            <input asp-for="ImageUrl" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="BatchSize" class="form-label">Batch Size</label>
                            <input asp-for="BatchSize" class="form-control" type="number" min="1" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="DaysOfCure" class="form-label">Days to Cure</label>
                            <input asp-for="DaysOfCure" class="form-control" type="number" min="1" />
                        </div>

                        <div class="mb-3">
                            <label asp-for="Note" class="form-label">Note</label>
                            <textarea asp-for="Note" class="form-control"></textarea>
                        </div>

                        <h4>Ingredients</h4>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Ingredient</th>
                                    <th>Quantity</th>
                                    <th>Cost</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="ingredientList">
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success" onclick="addIngredient()">➕ Add Ingredient</button>

                        <h5 class="mt-3">Total Cost: <span id="totalCost">0.00</span></h5>

                        <div class="d-grid gap-2 mt-3">
                            <button type="submit" class="btn btn-success">Create Recipe</button>
                            <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // 1) Načteme surová data z Modelu (v nich je Unit = enum = číslo)
    let rawItems = @Html.Raw(Json.Serialize(Model.AvailableWarehouseItems));

    // 2) Vytvoříme mapu číselných hodnot enumu na text
    let unitMapping = {
        1: "L",
        2: "ml",
        3: "Kg",
        4: "g",
        5: "Pcs"
        // atd...
    };

    // 3) Přemapujeme rawItems na array, kde unit bude už text (L, g, ml...)
    let availableItems = rawItems.map(item => {
        return {
            ...item,
            unit: unitMapping[item.unit] || "Unknown"
        };
    });

    // 4) Funkce pro přidání ingredience
        function addIngredient() {
        let ingredientList = document.getElementById("ingredientList");

        let newRow = document.createElement("tr");
        let index = ingredientList.children.length; // Počet ingrediencí = správné indexování polí

        // 🔹 Ingredient Select (výběr ingredience)
        let selectTd = document.createElement("td");
        let select = document.createElement("select");
        select.classList.add("form-select");
        select.name = `Ingredients[${index}].WarehouseItemId`;
        select.onchange = function () { updateUnitAndCost(this); };
        updateIngredientOptions(select);
        selectTd.appendChild(select);

        // Skrytý input pro název ingredience
        let nameHidden = document.createElement("input");
        nameHidden.type = "hidden";
        nameHidden.name = `Ingredients[${index}].WarehouseItemName`;
        selectTd.appendChild(nameHidden);

        // Quantity (Množství) + Jednotka
        let quantityTd = document.createElement("td");
        quantityTd.classList.add("d-flex", "align-items-center"); // Aby byla jednotka vedle inputu

        let quantityInput = document.createElement("input");
        quantityInput.type = "number";
        quantityInput.classList.add("form-control", "w-50", "quantity-input");
        quantityInput.min = "0.01";
        quantityInput.step = "0.01";
        quantityInput.value = "1.00";
        quantityInput.name = `Ingredients[${index}].Quantity`;
        quantityInput.required = true;
        quantityInput.oninput = function () { updateUnitAndCost(select); };

        // Jednotka (Text vedle inputu)
        let unitSpan = document.createElement("span");
        unitSpan.classList.add("ms-2", "unit-display");
        unitSpan.textContent = "-"; // Výchozí hodnota, která se později aktualizuje

        // Skrytý input pro jednotku
        let unitHidden = document.createElement("input");
        unitHidden.type = "hidden";
        unitHidden.name = `Ingredients[${index}].Unit`;

        quantityTd.appendChild(quantityInput);
        quantityTd.appendChild(unitSpan);
        quantityTd.appendChild(unitHidden);

        // Cost (Cena)
        let costTd = document.createElement("td");
        let costSpan = document.createElement("span");
        costSpan.classList.add("cost");
        costSpan.textContent = "0.00 €"; // Výchozí hodnota
        costTd.appendChild(costSpan);

        // Remove Button (Tlačítko pro odstranění ingredience)
        let removeTd = document.createElement("td");
        let removeBtn = document.createElement("button");
        removeBtn.type = "button";
        removeBtn.classList.add("btn", "btn-danger");
        removeBtn.textContent = "❌";
        removeBtn.onclick = function () {
            ingredientList.removeChild(newRow);
            updateTotalCost();
        };
        removeTd.appendChild(removeBtn);

        // Přidání buněk do řádku
        newRow.appendChild(selectTd);
        newRow.appendChild(quantityTd);
        newRow.appendChild(costTd);
        newRow.appendChild(removeTd);
        ingredientList.appendChild(newRow);

        // Nastavení jednotky a ceny
        updateUnitAndCost(select);
        updateTotalCost();
    }

        function updateUnitAndCost(selectElement) {
        let selectedOption = selectElement.selectedOptions[0];
        if (!selectedOption) return;

        let unit = selectedOption.dataset.unit; // Načtení jednotky z <option>
        let pricePerUnit = parseFloat(selectedOption.dataset.price); // Načtení ceny za jednotku

        let row = selectElement.closest("tr");
        let quantityInput = row.querySelector("input[name$='.Quantity']");
        let unitHiddenInput = row.querySelector("input[name$='.Unit']");
        let unitSpan = row.querySelector(".unit-display"); // Najdeme span pro jednotku
        let costSpan = row.querySelector(".cost");

        // Nastavení hidden inputu a zobrazení jednotky vedle inputu
        unitHiddenInput.value = unit;
        unitSpan.textContent = unit; // Aktualizujeme zobrazenou jednotku

        // Nastavení skrytého inputu pro WarehouseItemName
        let nameHidden = row.querySelector("input[name$='.WarehouseItemName']");
        nameHidden.value = selectedOption.textContent.trim();

        // Výpočet ceny
        let quantity = parseFloat(quantityInput.value) || 0;
        if (!isNaN(pricePerUnit) && !isNaN(quantity) && quantity > 0) {
            let cost = pricePerUnit * quantity;
            costSpan.textContent = cost.toFixed(2) + " €";
        } else {
            costSpan.textContent = "0.00 €";
        }

        updateTotalCost();
    }

    function updateTotalCost() {
        let total = 0;

        document.querySelectorAll("#ingredientList tr").forEach(row => {
            let select = row.querySelector("select");
            // Zajištění, že vybíráme správný input (množství)
            let quantityInput = row.querySelector("input[name$='.Quantity']");
            let pricePerUnit = parseFloat(select.selectedOptions[0].dataset.price);
            let quantity = parseFloat(quantityInput.value) || 0;
            let costSpan = row.querySelector("td:nth-child(3) span");

            if (!isNaN(pricePerUnit) && !isNaN(quantity)) {
                let cost = pricePerUnit * quantity;
                costSpan.textContent = cost.toFixed(2) + " €";
                total += cost;
            } else {
                costSpan.textContent = "0.00 €";
            }
        });

        document.getElementById("totalCost").textContent = total.toFixed(2) + " €";
    }

    function updateIngredientOptions(selectElement) {
        // Seznam již vybraných ID
        let selectedIds = Array.from(document.querySelectorAll("#ingredientList select"))
            .map(sel => parseInt(sel.value));

        // Naplnění <option> pouze nevybranými ingrediencemi
        selectElement.innerHTML = availableItems
            .filter(item => !selectedIds.includes(item.id))
            .map(item =>
                `<option value="${item.id}" data-price="${item.averagePricePerUnitWithoutTax}" data-unit="${item.unit}">
                    ${item.name}
                </option>`
            ).join("");
    }

    function refreshAllSelectOptions() {
        // Aktualizace všech selectů
        document.querySelectorAll("#ingredientList select").forEach(select => {
            let currentValue = select.value;
            select.innerHTML = availableItems
                .filter(item =>
                    !Array.from(document.querySelectorAll("#ingredientList select"))
                        .some(sel => sel !== select && parseInt(sel.value) === item.id)
                )
                .map(item =>
                    `<option value="${item.id}" data-price="${item.averagePricePerUnitWithoutTax}" data-unit="${item.unit}"
                     ${item.id == currentValue ? "selected" : ""}>
                        ${item.name}
                    </option>`
                ).join("");
        });
    }
</script>
